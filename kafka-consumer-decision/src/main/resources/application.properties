spring.main.web-application-type=none


cloud.aws.region.static=us-east-1
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_KEY}


cloud.aws.region.auto=false
cloud.aws.stack.auto=false

logging.level.com.amazonaws.util.EC2MetadataUtils=error
logging.level.com.amazonaws.internal.InstanceMetadataServiceResourceFetcher=error

spring.cloud.stream.kafka.binder.auto-add-partitions= true
spring.cloud.stream.kafka.binder.configuration.auto.offset.reset=latest
spring.cloud.stream.kafka.binder.configuration.max.poll.records=1000
spring.cloud.stream.kafka.binder.configuration.max.poll.interval.ms=200000


#kafka
spring.kafka.bootstrap-servers: ${KAFKA_ADDRESS}:${KAFKA_PORT}
#spring.kafka.bootstrap-servers: localhost:9092
spring.cloud.function.definition: fromFileUpdateToReplay;

#consumer
spring.cloud.stream.bindings.fromFileUpdateToReplay-in-0.destination: topic.fileUpdate
spring.cloud.stream.bindings.fromFileUpdateToReplay-in-0.group= decision
spring.cloud.stream.bindings.fromFileUpdateToReplay-in-0.consumer.max-attempts=3
spring.cloud.stream.bindings.fromFileUpdateToReplay-in-0.consumer.concurrency=1

#producer
spring.cloud.stream.bindings.fromFileUpdateToReplay-out-0.destination: topic.replay
spring.cloud.stream.bindings.fromFileUpdateToReplay-out-0.producer.partition-key-expression: headers['partitionKey']
spring.cloud.stream.bindings.fromFileUpdateToReplay-out-0.producer.partition-count= 3


